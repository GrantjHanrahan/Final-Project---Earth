<style>
  html, body, #viewDiv {
    padding: 0;
    margin-top: 1.3%;
    height: 99%;
    width: 100%;
  }
  #elevationDiv {
  position: absolute;
  top: 10%;
  right: 12px;
  padding: 7px;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border: 1px solid white;
}

</style>
<link rel="stylesheet" href="https://js.arcgis.com/4.6/esri/css/main.css">
<script src="https://js.arcgis.com/4.6/"></script>

<script>

var map;
var view;

$(document).ready(function(){

//-------------------------- Leap & ArcGis control variables -----------
  var zoomGestureDistLast = 0;
  var $view = $('body')
  var viewWidth = $view.width();
  var viewHeight = $view.height();

  var controller = new Leap.Controller();

  controller.on("frame", function(frame){

    //Get a pointable and normalize the tip position
    var pointable = frame.pointables[0];
    var interactionBox = frame.interactionBox;
    // var normalizedPosition = interactionBox.normalizePoint(pointable.tipPosition, true);
    //
    // // Convert the normalized coordinates to span the canvas
    // var canvasX = viewWidth * normalizedPosition[0];
    // var canvasY = viewHeight * (1 - normalizedPosition[1]);

    // var zoomIncrement = view.zoom + 0.1
    // var zoomStop = view.zoom
    // var zoomOut = view.zoom - 0.1
    // var tiltUp = view.camera.tilt + 0.6
    // var tiltDown = view.camera.tilt - 0.6
    // var tilt = view.camera.tilt

    if(frame.hands.length === 2){//---- if there are 2 hands used
      // console.log(frame.hands[0].palmPosition)
      // console.log(frame.hands[1].palmPosition)
      let zoom = view.zoom
      let zoomIn = frame.hands[0].pinchStrength + 0.3
      // console.log(zoomIn)
        if(zoomIn > 1.0){
          view.goTo({
            zoom: zoom + 0.4
          })
        }
        else if(zoomIn < 0.4){
          view.goTo({
            zoom: zoom - 0.4
          })
        }
        // console.log(frame.hands[0].direction[0] + 0.5)
    }
    // let center = view.center
    // let latitude = view.center.latitude
    // let longitude = view.center.longitude


    else if(frame.hands.length === 1){ //---- if there is 1 hand used

      if(frame.hands[0].type === "right"){
        //Get a pointable and normalize the tip position
        var pointable = frame.pointables[0];
        var interactionBox = frame.interactionBox;
        var normalizedPosition = interactionBox.normalizePoint(pointable.tipPosition, true);

        let longInc =  -1.0 + ((1.0 - normalizedPosition[0]) * 2.0);
        let longDec = (1.0 - normalizedPosition[0]) * 2.0
        // console.log(longDec)
        // let latInc =  -1.0 + ((1.0 - normalizedPosition[1]) * 2.0);
        // let pinchScale = (frame.hands[0].pinchStrength - 0.5) / 0.5;
        let zoomScale = 1.0 - (view.zoom - 1.8) / (15.0 - 1.8);
        if( zoomScale < 0) zoomScale = 0.001;

        let panRight = frame.hands[0].direction[0] + 0.5
        console.log(panRight)

        let panInc = (5 * panRight * longInc * zoomScale*zoomScale*zoomScale*zoomScale);
        let panDec = (10 * panRight * longDec * zoomScale*zoomScale*zoomScale*zoomScale);
        // let upInc = (10 * panRight * latInc * zoomScale*zoomScale*zoomScale*zoomScale);
        // console.log(panDec)

          if(panRight > 0.45){
            view.goTo({
              center: [
                view.center.longitude - panInc,
                view.center.latitude
                // Math.min(view.center.latitude + upInc, 90.0)
              ]
            })
            // console.log(latitude, longitude)
          }
          else if(panRight < 0.4){
            // console.log('pan left')
            view.goTo({
              center: [
                view.center.longitude - panDec,
                view.center.latitude
                // Math.min(view.center.latitude - upInc, 90.0)
              ]
            })
          }


          if(frame.hands[0].pinchStrength > 0.9){
            view.goTo({
              center: [
                view.center.longitude,
                view.center.latitude + (-0.5 + normalizedPosition[2])*10*zoomScale*zoomScale*zoomScale*zoomScale
                // Math.min(view.center.latitude - upInc, 90.0)
              ]
            })
          }
      } // frame.hands[0].type === "right"

      else if(frame.hands[0].type == "left"){
        // console.log('left')
        let tilt = view.camera.tilt
        let tiltUp = frame.hands[0].direction[0] + 0.5
          if(tiltUp > 0.45){
            // console.log('tilt up')
            view.goTo({
              tilt: tilt + 0.8
            })
          }
          else if(tiltUp < 0.4){
            // console.log('tilt down')
            view.goTo({
              tilt: tilt - 0.8
            })
          }

      }// else if frame.hands[0].type == "left"


    }

  });
  controller.connect(); //----- Leap.Controller


})//--------- $(document).ready()

require([
  "esri/Map",
  "esri/views/SceneView",
  "esri/widgets/Expand",
  "esri/widgets/BasemapGallery",
  "esri/layers/TileLayer",
  "dojo/dom",
  "dojo/on",
  "dojo/domReady!"
], function(Map, SceneView,Expand, BasemapGallery, TileLayer){

map = new Map({
  basemap: "satellite",
  ground: "world-elevation",
});

view = new SceneView({
  container: "viewDiv",//Ref to DOM node that will contain the view
  map: map, //Ref the map object
  scale: 80000000, //Sets initial scale to 1:50,000,000
  center: [86.9250, 27.9878] //Sets the center point of view with lon/ lat
});

var basemapGallery = new BasemapGallery({
  view: view,
  container: document.createElement("div")
});

var bgExpand = new Expand({
  view: view,
  content: basemapGallery.container,
  expandIconClass: "esri-icon-basemap"
});

// var tileLayer = new TileLayer({
// url: ""
// });
// console.log(tileLayer)


view.then(function() {
on(dom.byId("elevationInput"), "change", updateElevation);

function updateElevation(ev){//Turn ground layers visibility on/off
  map.ground.layers.forEach(function(layer){
  layer.visible = ev.target.checked;
  });
}

});
// map.add(tileLayer)
// Add the widget to the top-right corner of the view
view.ui.add(bgExpand, "bottom-right");
});


</script>

</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top" id="mainNav">
    <div class="container">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item"><%= link_to 'Home  ', pages_home_path %></li>
        <!-- <li class="nav-item"><%= link_to ' Environment', pages_environment_path %></li>
        <li class="nav-item"><%= link_to 'Wildlife', pages_wildlife_path %></li> -->
        <li class="nav-item"><%= link_to ' Waste', pages_waste_path %></li>

      </ul>
     <!-- <div class="collapse navbar-collapse" id="navbarResponsive">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link js-scroll-trigger" href="#one">One</a>
          </li>
          <li class="nav-item">
            <a class="nav-link js-scroll-trigger" href="#two">Two</a>
          </li>
          <li class="nav-item">
            <a class="nav-link js-scroll-trigger" href="#three">Three</a>
          </li>
          <li class="nav-item">
            <a class="nav-link js-scroll-trigger" href="#four">Four</a>
          </li>
        </ul>
      </div> -->
    </div>
  </nav>

  <div id="viewDiv"></div>
  <div id="elevationDiv">
    <label>Elevation:
      <input id="elevationInput" type="checkbox" checked="yes">
    </label>
 </div>

</body>
</html>
